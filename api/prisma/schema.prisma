// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  username  String    @unique
  password  String
  role_id   Int       @default(1)
  role      Role      @relation(fields: [role_id], references: [id])
  posts     Post[]
  commments Comment[]

  @@map("user")
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]

  @@map("role")
}

model Post {
  id           Int       @id @default(autoincrement())
  title        String    @unique
  content      String
  cover_url    String
  created_at   DateTime  @default(now())
  is_published Boolean   @default(false)
  user_id      Int
  user         User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  comments     Comment[]
  tags         Tag[]     @relation("PostTags")

  @@map("post")
}

model Tag {
  id    Int    @id @default(autoincrement())
  name  String @unique
  posts Post[] @relation("PostTags")

  @@map("tag")
}

model Comment {
  id         Int      @id @default(autoincrement())
  content    String
  created_at DateTime @default(now())
  post_id    Int
  post       Post     @relation(fields: [post_id], references: [id], onDelete: Cascade)
  user_id    Int
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("comment")
}
